version: '3.8'

services:
  db:
    image: postgres:15-alpine # Using PostgreSQL 15 Alpine version
    container_name: ${PROJECT_NAME}_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Persist database data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${DATABASE_PORT}:5432" # Expose port only if you need external access to DB
    networks:
      - app-network

  backend:
    build: ./backend # Build from Dockerfile in ./backend
    container_name: ${PROJECT_NAME}_backend
    command: python manage.py runserver 0.0.0.0:8000 # Run Django dev server
    volumes:
      - ./backend:/app # Mount backend code into container
      - static_volume:/app/staticfiles # Volume for collected static files
      - media_volume:/app/mediafiles   # Volume for user uploaded media files
    ports:
      - "8000:8000" # Expose Django dev server port (mainly for debugging)
    env_file:
      - .env # Load environment variables from .env file
    depends_on:
      db:
        condition: service_started 
    networks:
      - app-network

  frontend:
    build: ./frontend # Build from Dockerfile in ./frontend
    container_name: ${PROJECT_NAME}_frontend
    command: npm run dev # Run Next.js dev server
    volumes:
      - ./frontend:/app # Mount frontend code
      - /app/node_modules # Avoid mounting local node_modules over container's
      - /app/.next        # Avoid mounting local .next over container's
    ports:
      - "3000:3000" # Expose Next.js dev server port
    environment:
      - NODE_ENV=development
      # Pass API URL if needed by frontend build/runtime
      # - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    depends_on:
      - backend # Optional: useful if frontend needs backend during build
    networks:
      - app-network

  nginx:
    image: nginx:1.25-alpine # Using Nginx Alpine version
    container_name: ${PROJECT_NAME}_nginx
    ports:
      - "8080:80" # Map host port 8080 to container port 80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro # Mount nginx config (read-only)
      - static_volume:/vol/static:ro  # Mount static files volume (read-only)
      - media_volume:/vol/media:ro    # Mount media files volume (read-only)
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: # Define named volume for database persistence
  static_volume: # Define named volume for static files
  media_volume:  # Define named volume for media files