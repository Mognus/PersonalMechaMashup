# Define upstream servers (our backend and frontend containers)
# Using the service names defined in docker-compose.yml
upstream backend_server {
    # Django development server running inside the backend container
    server backend:8000;
}

upstream frontend_server {
    # Next.js development server running inside the frontend container
    server frontend:3000;
}

# Main server block that handles incoming requests
server {
    # Nginx will listen on port 80 inside the container
    # (Docker maps host port 8080 to this port 80)
    listen 80;
    server_name localhost; # Or your domain name in production

    # Increase max body size for potential file uploads via API (adjust as needed)
    client_max_body_size 10M;

    # --- Location blocks define how different URL paths are handled ---

    # Handle requests for static files served by Django/collected by collectstatic
    location /static/ {
        # Alias points to the directory where Django's collectstatic puts files.
        # This path corresponds to the 'static_volume' mount point inside the nginx container.
        alias /vol/static/;
        # Optional: Add caching headers for static assets in production
        # expires 1y;
        # add_header Cache-Control "public";
    }

    # Handle requests for media files (user uploads) served by Django
    location /media/ {
        # Alias points to the directory where Django stores media files.
        # This path corresponds to the 'media_volume' mount point inside the nginx container.
        alias /vol/media/;
        # Optional: Add caching headers if appropriate for your media files
        # expires 7d;
        # add_header Cache-Control "public";
    }

    # Proxy requests to the Django backend API (/api/ and /auth/)
    location /api/ {
        proxy_pass http://backend_server; # Forward to the backend upstream
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host; # Pass the original host header
        proxy_redirect off;
        # WebSocket support (if needed for DRF Channels later)
        # proxy_http_version 1.1;
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection "upgrade";
    }

    location /auth/ {
        proxy_pass http://backend_server; # Also forward to the backend upstream
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_redirect off;
        # WebSocket support (optional)
        # proxy_http_version 1.1;
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection "upgrade";
    }

    # Proxy all other requests to the Next.js frontend development server
    location / {
        proxy_pass http://frontend_server; # Forward to the frontend upstream
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_redirect off;
        # WebSocket support is often needed for Next.js HMR (Hot Module Replacement)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Optional: Custom error pages
    # error_page 500 502 503 504 /50x.html;
    # location = /50x.html {
    #     root /usr/share/nginx/html;
    # }
}